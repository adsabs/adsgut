o get tests to use memory database, and set memory datbase to init_db like the other
get itemtypes and tagtypes into the association classes
o also what we want to associate into a group is a tag posting, not a tag
support in posts.py for the new tables
o the get funcs return dicts in different ways. Standardize

Use flask shell extension
read up flask blueprints, put it under prefix. Use url_for inside templates or things will break.
create a __init__.py

flask_login is what Giovanni wantes to use
So i need to work with flask login
Add a adscookieid into the user. This will interface to Giovanni's flask_login
The nick maps to that adscookieid. The adscookieid can be use in place of nick, nick resolves to it.

blueprint has local static and templates. make sure template names are namespaced, as templates go bottom up
static goes from top to bottom...templates from bottom to top

BUGS:
one must escape tag text, especially / and :

Add ordering a lot of things by time. thus add time into results. How to intriduce ordering into api. A special criterion?

Needed now:
(a) put in time ordering
(b) permits
(c) error handling
(d) finally, simple routing (later)
(e) finally, groups in applications (later)
(f) get it in Giovanni mode
(g) textual setup stuff for bottstrapping the app
(h) deletions...simple ones

Requirements from ADS libraries
(1) tag having last creation date
(2) tag description
(3) number of entries for that tag => put in a count(*) on all web services where appropriate
(4) add a ads/note type
(5) facet creation through tags: support a sql IN query

Web service support needed:
(a) am i saved. Given item, is it saved by user, based on itemname, or itemuri x
(b) groups and apps an item is posted to x [What about groups and apps a tag is posted to: BUG]
(c) tags for a item x
(d) groups for a user not including public, default, and app groups x (just get from all groups right now TODO)
(e) is an item saved publicly? (check the groupsin? x TODO: add a boolean for this)
(f) create a new group x make invite x
(g) accept invitation to group x
(h) given Giovanni's information create a user: func or API? In anycase need a is USer inDatabase func
(i) TOTALLY FORGOT: add web services for POSTING items into groups and apps (we have this, dont we?)

html pages desired
(a) private libraries page
(b) private librariy for a group page
(c) profile page


================================================================
Stuff to be done now (not next year, ie no app pages etc)
[not clear whether one should expose anything about app to users]
(a) ordering of item results, asc and desc by time. counts. [we are on ordering but dont have counts]
(b) html pages: private library, personal profile (for grps invitations, etc), group priv library
(c) API:deletion web services(simple) for item/tag in group, item/tag in app, item/tag for user (user priv grp)
(d) API: is an item saved publically (we could parse from groups saved in)
(e) convert giovanni user to rahul user. And work it in giovanni mode.
(f) rationalize currentuser vas user being masqueraded as
(g) complex permits and any routing? (none now)
(h) textual bootstrap rather than setup python files. --X[use initialize vs testing for now]
(i) shifting stuff from old pub libs in here. Ask alberto for dump. (see email)
write script to bring that stuff in)
(j) ads libs: see requiremenys from ads libraries.
(h) error handling set of errors: perhaps not needed now
(i) sqlite AND MySQL support.
(j) document document document (code + api)
(k) item tags philosophy document. How notes are set up. 
(l) how tags are published: web service for omnibus publishing vs  group posting prefernce.
(m) clean up additional unused fields in tables
(n) a general item.groupsin is a leak: you ought to only show groups you are a member of
(o) all POSTS will fail to return appropriate info about the object unless you commit the object into the dbase as part of post in test --X
(p) cant sort on itemtype as its a different table join --X
(q) All items will currently give groups and such. Perhaps this should be suppressed.
(r) we do not support range or IN queries for searching. If we use filter instead of filter_by we ought to be able to do that.
(s) we need counts and pagination later